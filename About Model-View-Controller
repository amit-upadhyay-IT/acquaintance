I was listening to a podcast on software architecture, where they were discussing the MVC and other architectures, when I decided to write this post. This post discusses what MVC architecture is and how it works.

History
As always, here’s the mandatory history lesson. The MVC architecture was invented by a Smalltalk programmer named Trygve Reenskaug. In his words,

The essential purpose of MVC is to bridge the gap between the human user’s mental model and the digital model that exists in the computer.

Model
Models represent knowledge. A model could be a single object (rather uninteresting), or it could be some structure of objects.

The model represents knowledge. It is the data that will be displayed in the view.

View
A view is a (visual) representation of its model.

The view is what the user sees. The view works with the model to get the necessary data to display. When the model data changes, the view changes.

Controller
A controller is the link between a user and the system.
…
The controller receives such user output, translates it into the appropriate messages and pass these messages onto one or more of the views.

The controller translates the user’s interactions with the view into actions that the model will perform. In a stand-alone GUI client, user interactions could be button clicks or menu selections, whereas in an enterprise web application, they appear as GET and POST HTTP requests.

To sum it up, here’s how MVC works:
Model: what to render,
View: how to render,
Controller: user inputs

Putting it all together
The view registers as a listener on the model. Any changes to the underlying data of the model immediately result in a broadcast change notification, which the view receives. The model is not aware of the view or the controller — it simply broadcasts change notifications to all interested listeners. The controller is bound to the view. This typically means that any user actions that are performed on the view will invoke a registered listener method in the controller class. The controller is given a reference to the underlying model.

Once a user interacts with the view, the following actions occur:
The view recognizes that a GUI action — for example, pushing a button or dragging a scroll bar — has occurred, using a listener method that is registered to be called when such an action occurs.
The view calls the appropriate method on the controller.
The controller accesses the model, possibly updating it in a way appropriate to the user’s action.
If the model has been altered, it notifies interested listeners, such as the view, of the change.

Source:- http://www.oracle.com/technetwork/articles/javase/index-142890.html#2 
